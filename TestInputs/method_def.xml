<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="method_def.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<class>class <name>MyClass</name> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>MyClass</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>MyClass</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    <function_decl><type><name>char</name><modifier>*</modifier></type> <name>foo</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
</public><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt>
    <function><type><name>int</name></type> <name>GetNumber</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>number</name></expr>;</return></block_content>}</block></function>
</private>}</block>;</class>

<constructor><name><name>MyClass</name><operator>::</operator><name>MyClass</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
</block_content>}</block></constructor>

<constructor><name><name>MyClass</name><operator>::</operator><name>MyClass</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>number</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>char</name><modifier>*</modifier></type> <name><name>MyClass</name><operator>::</operator><name>foo</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bar</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>bar</name> <operator>&gt;</operator> <call><name>GetNumber</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"Hello, world!"</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="string">"Goodbye cruel world!"</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>MyClass</name></type> <name>mc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><call><name><name>mc</name><operator>.</operator><name>foo</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MyClass</name><modifier>*</modifier></type> <name>mc2</name> <init>= <expr><operator>new</operator> <call><name>MyClass</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><call><name><name>mc2</name><operator>-&gt;</operator><name>foo</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
